// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SalesManagement_DataAccess;

#nullable disable

namespace SalesManagement_BussinessObject.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.30")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("SalesManagement_BussinessObject.CategoryObject", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"), 1L, 1);

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories", (string)null);
                });

            modelBuilder.Entity("SalesManagement_BussinessObject.MemberObject", b =>
                {
                    b.Property<int>("MemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MemberId"), 1L, 1);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MemberId");

                    b.ToTable("Members", (string)null);
                });

            modelBuilder.Entity("SalesManagement_BussinessObject.OrderDetailObject", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"), 1L, 1);

                    b.Property<float>("Discount")
                        .HasColumnType("real");

                    b.Property<int?>("OrderObjectOrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductObjectProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderId");

                    b.HasIndex("OrderObjectOrderId");

                    b.HasIndex("ProductObjectProductId");

                    b.ToTable("OrderDetails", (string)null);
                });

            modelBuilder.Entity("SalesManagement_BussinessObject.OrderObject", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"), 1L, 1);

                    b.Property<decimal>("Freight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<int?>("MemberObjectMemberId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RequiredDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ShippedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("OrderId");

                    b.HasIndex("MemberObjectMemberId");

                    b.ToTable("Orders", (string)null);
                });

            modelBuilder.Entity("SalesManagement_BussinessObject.ProductObject", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("CategoryObjectCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UnitStock")
                        .HasColumnType("int");

                    b.Property<string>("Weight")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryObjectCategoryId");

                    b.ToTable("Products", (string)null);
                });

            modelBuilder.Entity("SalesManagement_BussinessObject.OrderDetailObject", b =>
                {
                    b.HasOne("SalesManagement_BussinessObject.OrderObject", null)
                        .WithMany("Details")
                        .HasForeignKey("OrderObjectOrderId");

                    b.HasOne("SalesManagement_BussinessObject.ProductObject", null)
                        .WithMany("OrderDetailObjects")
                        .HasForeignKey("ProductObjectProductId");
                });

            modelBuilder.Entity("SalesManagement_BussinessObject.OrderObject", b =>
                {
                    b.HasOne("SalesManagement_BussinessObject.MemberObject", null)
                        .WithMany("Orders")
                        .HasForeignKey("MemberObjectMemberId");
                });

            modelBuilder.Entity("SalesManagement_BussinessObject.ProductObject", b =>
                {
                    b.HasOne("SalesManagement_BussinessObject.CategoryObject", null)
                        .WithMany("Products")
                        .HasForeignKey("CategoryObjectCategoryId");
                });

            modelBuilder.Entity("SalesManagement_BussinessObject.CategoryObject", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("SalesManagement_BussinessObject.MemberObject", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("SalesManagement_BussinessObject.OrderObject", b =>
                {
                    b.Navigation("Details");
                });

            modelBuilder.Entity("SalesManagement_BussinessObject.ProductObject", b =>
                {
                    b.Navigation("OrderDetailObjects");
                });
#pragma warning restore 612, 618
        }
    }
}
